{"version":3,"sources":["store.js","App.js","index.js"],"names":["toDoState","store","createStore","state","action","type","title","comment","completed","id","Date","now","filter","toDo","map","todo","App","className","NewToDo","useState","setTitle","setComment","dispatch","useDispatch","onSubmit","e","preventDefault","target","reset","value","onChange","onClick","addToDo","ToDoList","toDoList","useSelector","console","log","item","i","checked","rootElement","document","getElementById","createRoot","render"],"mappings":"4KAEIA,EAAY,GAgCHC,EAAQC,aA9BR,WAAgC,IAA/BC,EAAK,uDAAGH,EAAWI,EAAM,uCACrC,MAAoB,aAAhBA,EAAOC,KACH,GAAN,mBACKF,GAAK,CACR,CACEG,MAAOF,EAAOE,MACdC,QAASH,EAAOG,QAChBC,WAAW,EACXC,GAAIC,KAAKC,SAIK,gBAAhBP,EAAOC,KACFF,EAAMS,QAAO,SAACC,GAAI,OAAKA,EAAKJ,KAAOL,EAAOK,EAAE,IAGjC,gBAAhBL,EAAOC,KACFF,EAAMW,KAAI,SAACC,GAAI,OACpBA,EAAKN,KAAOL,EAAOK,GAAE,2BAEZM,GAAI,IACPP,WAAYO,EAAKP,YAEnBO,CAAI,IAILZ,CACT,I,sBC5Be,SAASa,IACtB,OACE,sBAAKC,UAAU,MAAK,UAClB,cAAC,EAAO,IACR,cAAC,EAAQ,MAGf,CACO,IAAMC,EAAU,WACrB,MAA0BC,mBAAS,IAAG,mBAA/Bb,EAAK,KAAEc,EAAQ,KACtB,EAA8BD,mBAAS,IAAG,mBAAnCZ,EAAO,KAAEc,EAAU,KACpBC,EAAWC,cAOjB,OACE,8BACE,uBAAMC,SAPW,SAACC,GACpBA,EAAEC,iBACFD,EAAEE,OAAOC,OACX,EAIiC,UAC3B,4BACE,uBACEC,MAAOvB,EACPD,KAAK,OACLyB,SAAU,SAACL,GAAC,OAAKL,EAASK,EAAEE,OAAOE,MAAM,MAG7C,4BACE,0BACEA,MAAOtB,EACPuB,SAAU,SAACL,GAAC,OAAKJ,EAAWI,EAAEE,OAAOE,MAAM,MAG/C,4BACE,wBAAQE,QAAS,kBAAMT,EDHV,SAAChB,EAAOC,GAAO,MAAM,CAC1CD,QACAC,UACAF,KAAM,WACP,CCDyC2B,CAAQ1B,EAAOC,GAAS,EAAC,6BAOnE,EACa0B,EAAW,WACtB,IAAMC,EAAWC,aAAY,SAAChC,GAAK,OAAKA,CAAK,IACvCmB,EAAWC,cAEjB,OACE,gCACGa,QAAQC,IAAIH,GACb,6BACGA,EAASpB,KAAI,SAACwB,EAAMC,GAAC,OACpB,+BACE,+BACE,uBACElC,KAAK,WACLmC,QAASF,EAAK9B,UACdsB,SAAU,kBAAMR,EDdG,CACjCb,GCakD6B,EAAK7B,GDZvDJ,KAAM,eCYqD,IAE9CiC,EAAKhC,SAER,4BAAIgC,EAAK/B,UAET,wBAAQwB,QAAS,kBAAMT,EDzBA,CACjCb,GCwBqD6B,EAAK7B,GDvB1DJ,KAAM,eCuBwD,EAAC,sBAX9CkC,EAcJ,QAKf,ECpEME,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GAEnBI,OACH,cAAC,IAAQ,CAAC5C,MAAOA,EAAM,SACrB,cAACe,EAAG,M","file":"static/js/main.c009c9b2.chunk.js","sourcesContent":["import { createStore } from \"redux\";\n\nlet toDoState = [];\n\nconst toDo = (state = toDoState, action) => {\n  if (action.type === \"ADD_TODO\") {\n    return [\n      ...state,\n      {\n        title: action.title,\n        comment: action.comment,\n        completed: false,\n        id: Date.now()\n      }\n    ];\n  }\n  if (action.type === \"DELETE_TODO\") {\n    return state.filter((toDo) => toDo.id !== action.id);\n  }\n\n  if (action.type === \"TOGGLE_TODO\") {\n    return state.map((todo) =>\n      todo.id === action.id\n        ? {\n            ...todo,\n            completed: !todo.completed\n          }\n        : todo\n    );\n  }\n\n  return state;\n};\n\nexport const store = createStore(toDo);\n\nexport const addToDo = (title, comment) => ({\n  title,\n  comment,\n  type: \"ADD_TODO\"\n});\n\nexport const deleteToDo = (id) => ({\n  id,\n  type: \"DELETE_TODO\"\n});\n\nexport const toggleToDO = (id) => ({\n  id,\n  type: \"TOGGLE_TODO\"\n});\n","import \"./styles.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { deleteToDo, addToDo, toggleToDO } from \"./store\";\nimport { useState } from \"react\";\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <NewToDo />\n      <ToDoList />\n    </div>\n  );\n}\nexport const NewToDo = () => {\n  const [title, setTitle] = useState(\"\");\n  const [comment, setComment] = useState(\"\");\n  const dispatch = useDispatch();\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    e.target.reset();\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <p>\n          <input\n            value={title}\n            type=\"text\"\n            onChange={(e) => setTitle(e.target.value)}\n          />\n        </p>\n        <p>\n          <textarea\n            value={comment}\n            onChange={(e) => setComment(e.target.value)}\n          />\n        </p>\n        <p>\n          <button onClick={() => dispatch(addToDo(title, comment))}>\n            Add Tiket\n          </button>\n        </p>\n      </form>\n    </div>\n  );\n};\nexport const ToDoList = () => {\n  const toDoList = useSelector((state) => state);\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      {console.log(toDoList)}\n      <ul>\n        {toDoList.map((item, i) => (\n          <li key={i}>\n            <h1>\n              <input\n                type=\"checkbox\"\n                checked={item.completed}\n                onChange={() => dispatch(toggleToDO(item.id))}\n              />\n              {item.title}\n            </h1>\n            <p>{item.comment}</p>\n\n            <button onClick={() => dispatch(deleteToDo(item.id))}>\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n"],"sourceRoot":""}